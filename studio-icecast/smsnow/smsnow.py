#-----------------------------------------------------------------------
# Name:  smsnow.py
#
# Purpose: Monitors the health of BMIR status page and
#   sends SMS messages upon changes using the twilio service.
#
# Setup: Run this on a cloud machine
#   Set up cron or systemd timer to run every minute
#
# Prereqs: Establish a twilio account.
#   Create smsnow.creds.json containing twilio credentials and
#   source and destination phone numbers.
#
# Beware: This analysis is tightly coupled to HTML color definitions
#   generated by monitor.sh.  If that changes, this must change.
#   Ugly and problematic.  Future: make it more deterministic.
#
# Invocation:
#
#	python smsnow.py
#
# AD 2019-0725 Copyright BMIR 2019
#-----------------------------------------------------------------------
from twilio.rest import Client
import json
import os
import requests
from   requests import Request, Session
import shlex
from   subprocess import Popen, PIPE
import sys
import time

global SMSNOW_CREDS_FILENAME
SMSNOW_CREDS_FILENAME = 'smsnow.creds.json'

global SMSNOW_STATE_FILENAME
SMSNOW_STATE_FILENAME = 'smsnow.state.json'

global target_url
target_url = 'UNDEFINED'

global account_sid
account_sid = 'UNDEFINED'

global auth_token
auth_token = 'UNDEFINED'

global source_phone
source_phone = 'UNDEFINED'

global dest_phone_list
dest_phone_list = ['UNDEFINED']

def isOld(current_status):
    """Helper method returns True if the timestamp in the HTML file
    is older from current time than a threshold (initially 3 mins).
    Note: This technique requires that time clocks are well synched."""
    if 'epoch' not in current_status:
        print 'isOld: Error: epoch is not in current_status: %s' % (repr(current_status))
        return True
    html_epoch = int(current_status['epoch'])
    current_epoch = int(time.time())
    print 'html time = %i python time = %i' % (html_epoch, current_epoch)
    difference = current_epoch - html_epoch
    print 'difference=%i' % ( difference )
    if difference > 180:
        return True
    return False

def getAttribsWithColor(current_status, color):
    """Returns a list of attribute names which have the specified color."""
    return_list = []
    for key,val in current_status.iteritems():
        print 'key=%s val=%s' % (key, val)
        if color== val:
            return_list.append(key)
    print 'return_list: %s' % (repr(return_list))
    return return_list

def getColor(line):
    print '>>>%s<<<' % line
    keyStart = 'background-color: #'
    ixStart = line.find(keyStart) + len(keyStart)

    keyFinish = '"><b>'
    ixFinish = line.find(keyFinish)

    print 'ixStart=%i ixFinish=%i' % (ixStart, ixFinish)

    value = line[ixStart:ixFinish]
    print 'value=>>>%s<<<' % (value)

    if '00FF00' == value:
        return 'GRN'
    if 'FFFF00' == value:
        return 'YEL'
    if 'FA8072' == value:
        return 'RED'
    return 'UNKNOWN'


def analyzeHTML():
    response = requests.get(target_url, verify=False)
    ### print(response.text)

    return_obj = {}

    status_code = response.status_code
    print 'status_code=%i' % (status_code)
    if 200 != status_code:
        print 'Exit: Error: Unexpected status_code=%i' % (status_code)
        sys.exit(1)

    line_list = response.text.split('<br>')
    print 'len(line_list)=%i' % ( len(line_list) )

    for line in line_list:
        #print " "
        #print '>>>%s<<<' % line
        key = 'Last Updated: '
        if key in line:
            ### print '>>>%s<<<' % line
            ixStart = line.find(key) + len(key)
            ixFinish = len(line)
            ### print 'ixStart=%i ixFinish=%i' % (ixStart, ixFinish)

            value = line[ixStart:ixFinish]
            ### print 'last_updated=>>>%s<<<' % (last_updated)
            return_obj['date'] = value

        key = 'Epoch Seconds: '
        if key in line:
            ### print '>>>%s<<<' % line
            ixStart = line.find(key) + len(key)
            ixFinish = len(line)
            ### print 'ixStart=%i ixFinish=%i' % (ixStart, ixFinish)

            value = line[ixStart:ixFinish]
            ### print 'last_updated=>>>%s<<<' % (last_updated)
            return_obj['epoch'] = value

        key = 'Available Memory: '
        if key in line:
            return_obj['mem'] = getColor(line)

        key = 'Swap File Size: '
        if key in line:
            return_obj['swap'] = getColor(line)

        key = 'Icecast Process: '
        if key in line:
            return_obj['ice'] = getColor(line)

        key = 'Streamripper Process: '
        if key in line:
            return_obj['sr'] = getColor(line)

        key = 'Received Data: '
        if key in line:
            return_obj['rx'] = getColor(line)

        key = 'Filesystem Growth: '
        if key in line:
            return_obj['fs'] = getColor(line)

        key = 'RMS Amplitude: '
        if key in line:
            return_obj['rms'] = getColor(line)

        key = 'MP3 File Counts: '
        if key in line:
            return_obj['bkps'] = getColor(line)

    ### print return_obj
    return return_obj


def sendSMS(msg):
    ###print 'account_sid=%s' % (account_sid)
    ###print 'auth_token=%s' % (auth_token)
    ###print 'source_phone=%s' % (source_phone)
    ###for dest_phone in dest_phone_list:
    ###    print 'dest_phone=%s' % (dest_phone)

    client = Client(account_sid, auth_token)

    for dest_phone in dest_phone_list:
	print 'Sending SMS from %s to %s. Msg: %s' % (source_phone, dest_phone, msg)
        message = client.messages.create(
            to=dest_phone,
            from_=source_phone,
            body='%s' % msg)
        print(message.sid)

    return

def writeJsonFile(filename, json_object):
    with open(filename, 'w') as outfile:
        json.dump(json_object, outfile, indent=4)
    print 'Wrote JSON object to file %s' % (filename)

def saveState(state):
    json_object = { "state": state }
    writeJsonFile(SMSNOW_STATE_FILENAME, json_object)

#    return

"""
State Enums

    STATE_NONE
    STATE_RED
    STATE_YELLOW
    STATE_GREEN
"""

print 'Entry.'

# Read smsnow credentials file.
smsnow_creds_data = {}
if not os.path.isfile(SMSNOW_CREDS_FILENAME):
    print 'Invocation Error:  SMSNow creds file %s does not exist.' % (SMSNOW_CREDS_FILENAME)
    sys.exit(1)
with open(SMSNOW_CREDS_FILENAME) as data_file:
    try:
        smsnow_creds_data = json.load(data_file)
    except:
        print 'Exit: Error parsing JSON creds file: %s' % (SMSNOW_CREDS_FILENAME)
        sys.exit(1)

# Extract credentials info.
if 'target_url' not in smsnow_creds_data:
    print 'Error: Creds file %s does not contain target_url.' % (SMSNOW_CREDS_FILENAME)
    sys.exit(1)
target_url = smsnow_creds_data['target_url']
print 'target_url=%s' % (target_url)

if 'account_sid' not in smsnow_creds_data:
    print 'Error: Creds file %s does not contain account_sid.' % (SMSNOW_CREDS_FILENAME)
    sys.exit(1)
account_sid = smsnow_creds_data['account_sid']
print 'account_sid=%s' % (account_sid)

if 'auth_token' not in smsnow_creds_data:
    print 'Error: Creds file %s does not contain auth_token.' % (SMSNOW_CREDS_FILENAME)
    sys.exit(1)
auth_token = smsnow_creds_data['auth_token']
print 'auth_token=%s' % (auth_token)

if 'source_phone' not in smsnow_creds_data:
    print 'Error: Creds file %s does not contain source_phone.' % (SMSNOW_CREDS_FILENAME)
    sys.exit(1)
source_phone = smsnow_creds_data['source_phone']
print 'source_phone=%s' % (source_phone)

if 'dest_phone_list' not in smsnow_creds_data:
    print 'Error: Creds file %s does not contain dest_phone_list.' % (SMSNOW_CREDS_FILENAME)
    sys.exit(1)
dest_phone_list = smsnow_creds_data['dest_phone_list']
print 'len(dest_phone_list)=%i' % (len(dest_phone_list))
for dest_phone in dest_phone_list:
    print 'dest_phone=%s' % (dest_phone)

# Read smsnow state file, if it exists.
smsnow_state_data = {}
if not os.path.isfile(SMSNOW_STATE_FILENAME):
    print 'SMSNow state file %s does not exist. Creating initial state.' % (SMSNOW_STATE_FILENAME)
    smsnow_state_data = { "state": "UNDEFINED" }
else:
    with open(SMSNOW_STATE_FILENAME) as data_file:
        try:
            smsnow_state_data = json.load(data_file)
            print 'Read smsnow state data...'
            print smsnow_state_data
        except:
            print 'Exit: Error parsing JSON state file: %s' % (SMSNOW_STATE_FILENAME)
            sys.exit(1)

# Extract state info.
if 'state' not in smsnow_state_data:
    print 'Error: State file %s does not contain state.' % (SMSNOW_STATE_FILENAME)
    sys.exit(1)
old_state = smsnow_state_data['state']
print 'old_state=%s' % (old_state)

# Fetch and analyze the HTML file.
current_status = analyzeHTML()
### print current_status

# Is timestamp on HTML file old?
if isOld(current_status):
    print 'OLD'
    if 'STATE_NONE' == old_state:
        print 'Exit. Already recognized old HTML.'
    else:
        saveState('STATE_NONE')
        sendSMS('ERR: HTML is old. No status.')
    sys.exit(0)


# Any red in HTML file?
red_list = getAttribsWithColor(current_status, 'RED')
if 0 < len(red_list):
    print 'RED'
    if 'STATE_RED' == old_state:
        print 'Exit. Already recognized RED state.'
    else:
        saveState('STATE_RED')
        sendSMS('RED: %s %s' % (current_status['date'], repr(red_list)))
    sys.exit(0)

# Any yellow in HTML file?
yel_list = getAttribsWithColor(current_status, 'YEL')
if 0 < len(yel_list):
    print 'YEL'
    if 'STATE_YEL' == old_state:
        print 'Exit. Already recognized YEL state.'
    else:
        saveState('STATE_YEL')
        sendSMS('YEL: %s %s' % (current_status['date'], repr(yel_list)))
    sys.exit(0)

# Is state already green?
print 'GRN'
if 'STATE_GRN' == old_state:
    print 'Exit. Already recognized GRN state.'
else:
    saveState('STATE_GRN')
    sendSMS('ALL OK: %s' % (current_status['date']))
sys.exit(0)
